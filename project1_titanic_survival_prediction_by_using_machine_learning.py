# -*- coding: utf-8 -*-
"""Project1_Titanic Survival Prediction By Using Machine Learning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1kJL9rQZcuQugoztlmIqcCDUCx_sTiaXq

importing the dependenics
"""

import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn import linear_model
from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import Perceptron
from sklearn.tree import DecisionTreeClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import SGDClassifier
from sklearn.svm import SVC, LinearSVC
from sklearn.naive_bayes import GaussianNB
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix

#Load the data from csv file to Pandas DataFrame
titanic_data = pd.read_csv('/content/train (1).csv')

"""Data Collection & Processing"""

from google.colab import drive
drive.mount('/content/drive')

"""# New Section"""

#printing the first 5 rows of the dataframe
titanic_data.head()

#number of rows and columns
titanic_data.shape

titanic_data.describe()

#getting some information about the data
titanic_data.info()

#check the number of missing value in each column
titanic_data.isnull().sum()

"""Handling The Missing Values"""

#drop the 'Cabin' column from the dataframe
titanic_data = titanic_data.drop(columns='Cabin',axis=1)

#replacing missing value in 'Age'column with mean value
titanic_data['Age'].fillna(titanic_data['Age'].mean(),inplace=True)

#finding mode value of 'Embarked' column
print(titanic_data['Embarked'].mode())

print(titanic_data['Embarked'].mode()[0])

# replacing the missing value in 'Embarked' column with mode value
titanic_data['Embarked'].fillna(titanic_data['Embarked'].mode()[0], inplace=True)

#check the number of missing value in each column
titanic_data.isnull().sum()

"""Data Analysis"""

#getting some statistical measures about the data
titanic_data.describe()

# finding The number of people survived or not survived
titanic_data['Survived'].value_counts()

"""Data Visualization"""

sns.set()

#Making a count plot for "survived" column
sns.countplot('Survived',data=titanic_data)

titanic_data['Sex'].value_counts()

#Making a count plot for "Sex" column
sns.countplot('Sex',data=titanic_data)

#number of survived Genderwise
sns.countplot('Sex',hue='Survived',data=titanic_data)

#Making a count plot for "Pclass" column
sns.countplot('Pclass',data=titanic_data)

sns.countplot('Pclass',hue='Survived',data=titanic_data)

#Making a count plot for "Embarked" column
sns.countplot('Embarked',data=titanic_data)

sns.countplot('Embarked',hue='Survived',data=titanic_data)

#Making a count plot for "SibSp" column
sns.countplot('SibSp',data=titanic_data)

sns.countplot('SibSp',hue='Survived',data=titanic_data)

"""Encoding the Categorical colunms"""

titanic_data['Sex'].value_counts()

titanic_data['Embarked'].value_counts()

#converting catagorical columns
titanic_data.replace({'Sex':{'male':0,'female':1},'Embarked':{'S':0,'C':1,'Q':2}}, inplace=True)

titanic_data.head()

"""Separting features & Target"""

X=titanic_data.drop(columns=['PassengerId','Name','Ticket','Survived'],axis=1)
Y=titanic_data['Survived']

print(X)

print(Y)

"""Splitting the data into training data & Test data"""

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2,random_state=2)

print(X.shape,X_train.shape,X_test.shape)

"""Model Training

Logistic Regression
"""

model=LogisticRegression()

# Training The Logisitc Regression modelo with Training data
model.fit(X_train,Y_train)

"""Model Evaluation

Accuracy Score
"""

#accuracy on training data
X_train_prediction=model.predict(X_train)

print(X_train_prediction)

training_data_accuracy=accuracy_score(Y_train,X_train_prediction)
print('Accuracy score of training data :', training_data_accuracy)

#accuracy on test data
X_test_prediction=model.predict(X_test)

from sklearn.metrics import classification_report,confusion_matrix
print(confusion_matrix(Y_test,X_test_prediction))

print(classification_report(Y_test,X_test_prediction))

print(X_test_prediction)

test_data_accuracy=accuracy_score(Y_test,X_test_prediction)
print('Accuracy score of test data :', test_data_accuracy)

"""Random Forest"""

random_forest=RandomForestClassifier(n_estimators=100)

random_forest.fit(X_train,Y_train)

"""Accuracy"""

X_prediction=random_forest.predict(X_train)

print(X_prediction)

training_data_accuracy2=accuracy_score(Y_train,X_prediction)
print('Accuracy score of training Data :',training_data_accuracy2)

#accuracy on test data
X_prediction2=random_forest.predict(X_test)

print(X_prediction2)

from sklearn.metrics import classification_report,confusion_matrix
print(confusion_matrix(Y_test,X_prediction2))

print(classification_report(Y_test,X_prediction2))

test_data_accuracy3=accuracy_score(Y_test,X_prediction2)
print('Accuracy score of test data :', test_data_accuracy3)

"""Stochastic Gradient Descent(SGD):"""

sgd=linear_model.SGDClassifier(max_iter=5, tol=None)

#Training The Logistic Regression Model With Training data
sgd.fit(X_train,Y_train)

"""Accuracy Score"""

predi=sgd.predict(X_train)

print(predi)

train_data_accuracy=accuracy_score(Y_train,predi)
print('Accuracy score of training data: ',train_data_accuracy)

X_testing_predi=sgd.predict(X_test)

print(X_testing_predi)

from sklearn.metrics import classification_report,confusion_matrix
print(confusion_matrix(Y_test,X_testing_predi))

print(classification_report(Y_test,X_testing_predi))

train_data_accuracy4=accuracy_score(Y_test,X_testing_predi)
print('Accuracy score of training data: ',train_data_accuracy4)

"""Decision Tree"""

decision_tree = DecisionTreeClassifier()

decision_tree.fit(X_train,Y_train)

X_predict_train=decision_tree.predict(X_train)

print(X_predict_train)

train_data_accuracy5=accuracy_score(Y_train,X_predict_train)
print('Accuracy score of training data: ',train_data_accuracy5)

test_data_acc=decision_tree.predict(X_test)

print(test_data_acc)

from sklearn.metrics import classification_report,confusion_matrix
print(confusion_matrix(Y_test,test_data_acc))

print(classification_report(Y_test,test_data_acc))

train_data_accuracy6=accuracy_score(test_data_acc)
print('Accuracy score of training data: ',train_data_accuracy6)

"""Linear Support Vector Machine:"""

linear_svc = LinearSVC()

linear_svc.fit(X_train,Y_train)

X_training=linear_svc.predict(X_train)

print(X_training)

train_data_accuracy6=accuracy_score(Y_train,X_training)
print('Accuracy score of training data: ',train_data_accuracy6)

from sklearn.metrics import classification_report,confusion_matrix
print(confusion_matrix(Y_test,X_test_pred))

print(classification_report(Y_test,X_test_pre))

X_test_pred=linear_svc.predict(X_test)
print(X_test_pred)

train_data_accuracy7=accuracy_score(Y_test,X_test_pred)
print('Accuracy score of training data: ',train_data_accuracy7)

"""K Nearest Neighbor:"""

knn = KNeighborsClassifier(n_neighbors = 3)

knn.fit(X_train,Y_train)

X_train_pr=knn.predict(X_train)

print(X_train_pr)

train_data_accuracy8=accuracy_score(Y_train,X_train_pr)
print('Accuracy score of training data: ',train_data_accuracy8)

X_test_pre=knn.predict(X_test)

print(X_test_pre)

train_data_accuracy8=accuracy_score(Y_test,X_test_pre)
print('Accuracy score of training data: ',train_data_accuracy8)

from sklearn.metrics import classification_report,confusion_matrix

print(confusion_matrix(Y_test,X_test_pre))

print(classification_report(Y_test,X_test_pre))

from sklearn.model_selection import train_test_split
from sklearn.metrics import precision_recall_curve
from sklearn.metrics import plot_precision_recall_curve
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score

model = LogisticRegression()
model.fit(X_train, Y_train)

#Make prediction on the test set
pred = model.predict(X_test)

precision = precision_score(Y_test, pred)
recall = recall_score(Y_test, pred)
print('Precision: ',precision)
print('Recall: ',recall)

precis= precision_score(Y_test, )